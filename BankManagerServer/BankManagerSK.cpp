// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "BankManager.h"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

	static const char* _0RL_library_version = omniORB_4_1;



BankManager::Account_ptr BankManager::Account_Helper::_nil() {
	return ::BankManager::Account::_nil();
}

::CORBA::Boolean BankManager::Account_Helper::is_nil(::BankManager::Account_ptr p) {
	return ::CORBA::is_nil(p);

}

void BankManager::Account_Helper::release(::BankManager::Account_ptr p) {
	::CORBA::release(p);
}

void BankManager::Account_Helper::marshalObjRef(::BankManager::Account_ptr obj, cdrStream& s) {
	::BankManager::Account::_marshalObjRef(obj, s);
}

BankManager::Account_ptr BankManager::Account_Helper::unmarshalObjRef(cdrStream& s) {
	return ::BankManager::Account::_unmarshalObjRef(s);
}

void BankManager::Account_Helper::duplicate(::BankManager::Account_ptr obj) {
	if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

BankManager::Account_ptr
	BankManager::Account::_duplicate(::BankManager::Account_ptr obj)
{
	if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
	return obj;
}

BankManager::Account_ptr
	BankManager::Account::_narrow(::CORBA::Object_ptr obj)
{
	if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
	_ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
	return e ? e : _nil();
}


BankManager::Account_ptr
	BankManager::Account::_unchecked_narrow(::CORBA::Object_ptr obj)
{
	if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
	_ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
	return e ? e : _nil();
}

BankManager::Account_ptr
	BankManager::Account::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
	static _objref_Account _the_nil_obj;
	return &_the_nil_obj;
#else
	static _objref_Account* _the_nil_ptr = 0;
	if( !_the_nil_ptr ) {
		omni::nilRefLock().lock();
		if( !_the_nil_ptr ) {
			_the_nil_ptr = new _objref_Account;
			registerNilCorbaObject(_the_nil_ptr);
		}
		omni::nilRefLock().unlock();
	}
	return _the_nil_ptr;
#endif
}

const char* BankManager::Account::_PD_repoId = "IDL:BankManager/Account:1.0";


BankManager::_objref_Account::~_objref_Account() {

}


BankManager::_objref_Account::_objref_Account(omniIOR* ior, omniIdentity* id) :
omniObjRef(::BankManager::Account::_PD_repoId, ior, id, 1)


{
	_PR_setobj(this);
}

void*
	BankManager::_objref_Account::_ptrToObjRef(const char* id)
{
	if( id == ::BankManager::Account::_PD_repoId )
		return (::BankManager::Account_ptr) this;

	if( id == ::CORBA::Object::_PD_repoId )
		return (::CORBA::Object_ptr) this;

	if( omni::strMatch(id, ::BankManager::Account::_PD_repoId) )
		return (::BankManager::Account_ptr) this;

	if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
		return (::CORBA::Object_ptr) this;

	return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_n_cstring_i_cstring_n_cstring_i_cstring
class _0RL_cd_C56591681C75E8F1_00000000
	: public omniCallDescriptor
{
public:
	inline _0RL_cd_C56591681C75E8F1_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
	omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
	{

	}

	void marshalArguments(cdrStream&);
	void unmarshalArguments(cdrStream&);

	void unmarshalReturnedValues(cdrStream&);
	void marshalReturnedValues(cdrStream&);


	static const char* const _user_exns[];

	::CORBA::String_var arg_0_;
	char** arg_0;
	::CORBA::String_var arg_1_;
	const char* arg_1;
	::CORBA::String_var arg_2_;
	char** arg_2;
	::CORBA::String_var arg_3_;
	const char* arg_3;
	::CORBA::Boolean result;
};

void _0RL_cd_C56591681C75E8F1_00000000::marshalArguments(cdrStream& _n)
{
	_n.marshalString(*arg_0,0);
	_n.marshalString(arg_1,0);
	_n.marshalString(*arg_2,0);
	_n.marshalString(arg_3,0);

}

void _0RL_cd_C56591681C75E8F1_00000000::unmarshalArguments(cdrStream& _n)
{
	arg_0_ = _n.unmarshalString(0);
	arg_0 = &arg_0_.inout();
	arg_1_ = _n.unmarshalString(0);
	arg_1 = arg_1_.in();
	arg_2_ = _n.unmarshalString(0);
	arg_2 = &arg_2_.inout();
	arg_3_ = _n.unmarshalString(0);
	arg_3 = arg_3_.in();

}

void _0RL_cd_C56591681C75E8F1_00000000::marshalReturnedValues(cdrStream& _n)
{
	_n.marshalBoolean(result);
	_n.marshalString(*arg_0,0);
	_n.marshalString(*arg_2,0);

}

void _0RL_cd_C56591681C75E8F1_00000000::unmarshalReturnedValues(cdrStream& _n)
{
	result = _n.unmarshalBoolean();
	arg_0_ = *arg_0;
	*arg_0 = (char*) _CORBA_String_helper::empty_string;
	*arg_0 = _n.unmarshalString(0);
	arg_2_ = *arg_2;
	*arg_2 = (char*) _CORBA_String_helper::empty_string;
	*arg_2 = _n.unmarshalString(0);

}

const char* const _0RL_cd_C56591681C75E8F1_00000000::_user_exns[] = {
	0
};

// Local call call-back function.
static void
	_0RL_lcfn_C56591681C75E8F1_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
	_0RL_cd_C56591681C75E8F1_00000000* tcd = (_0RL_cd_C56591681C75E8F1_00000000*)cd;
	BankManager::_impl_Account* impl = (BankManager::_impl_Account*) svnt->_ptrToInterface(BankManager::Account::_PD_repoId);
	tcd->result = impl->open(*tcd->arg_0, tcd->arg_1, *tcd->arg_2, tcd->arg_3);


}

::CORBA::Boolean BankManager::_objref_Account::open(::CORBA::String_INOUT_arg id, const char* password, ::CORBA::String_INOUT_arg balance, const char* customerName)
{
	_0RL_cd_C56591681C75E8F1_00000000 _call_desc(_0RL_lcfn_C56591681C75E8F1_10000000, "open", 5);
	_call_desc.arg_0 = &(char*&) id;
	_call_desc.arg_1 = password;
	_call_desc.arg_2 = &(char*&) balance;
	_call_desc.arg_3 = customerName;

	_invoke(_call_desc);
	return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring
class _0RL_cd_C56591681C75E8F1_20000000
	: public omniCallDescriptor
{
public:
	inline _0RL_cd_C56591681C75E8F1_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
	omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
	{

	}

	void marshalArguments(cdrStream&);
	void unmarshalArguments(cdrStream&);

	void unmarshalReturnedValues(cdrStream&);
	void marshalReturnedValues(cdrStream&);


	static const char* const _user_exns[];

	::CORBA::String_var arg_0_;
	const char* arg_0;
	::CORBA::Boolean result;
};

void _0RL_cd_C56591681C75E8F1_20000000::marshalArguments(cdrStream& _n)
{
	_n.marshalString(arg_0,0);

}

void _0RL_cd_C56591681C75E8F1_20000000::unmarshalArguments(cdrStream& _n)
{
	arg_0_ = _n.unmarshalString(0);
	arg_0 = arg_0_.in();

}

void _0RL_cd_C56591681C75E8F1_20000000::marshalReturnedValues(cdrStream& _n)
{
	_n.marshalBoolean(result);

}

void _0RL_cd_C56591681C75E8F1_20000000::unmarshalReturnedValues(cdrStream& _n)
{
	result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_C56591681C75E8F1_20000000::_user_exns[] = {
	0
};

// Local call call-back function.
static void
	_0RL_lcfn_C56591681C75E8F1_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
	_0RL_cd_C56591681C75E8F1_20000000* tcd = (_0RL_cd_C56591681C75E8F1_20000000*)cd;
	BankManager::_impl_Account* impl = (BankManager::_impl_Account*) svnt->_ptrToInterface(BankManager::Account::_PD_repoId);
	tcd->result = impl->close(tcd->arg_0);


}

::CORBA::Boolean BankManager::_objref_Account::close(const char* id)
{
	_0RL_cd_C56591681C75E8F1_20000000 _call_desc(_0RL_lcfn_C56591681C75E8F1_30000000, "close", 6);
	_call_desc.arg_0 = id;

	_invoke(_call_desc);
	return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cstring
class _0RL_cd_C56591681C75E8F1_40000000
	: public omniCallDescriptor
{
public:
	inline _0RL_cd_C56591681C75E8F1_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
	omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
	{

	}

	void marshalArguments(cdrStream&);
	void unmarshalArguments(cdrStream&);

	void unmarshalReturnedValues(cdrStream&);
	void marshalReturnedValues(cdrStream&);


	static const char* const _user_exns[];

	::CORBA::String_var arg_0_;
	const char* arg_0;
	::CORBA::String_var arg_1_;
	const char* arg_1;
	::CORBA::Boolean result;
};

void _0RL_cd_C56591681C75E8F1_40000000::marshalArguments(cdrStream& _n)
{
	_n.marshalString(arg_0,0);
	_n.marshalString(arg_1,0);

}

void _0RL_cd_C56591681C75E8F1_40000000::unmarshalArguments(cdrStream& _n)
{
	arg_0_ = _n.unmarshalString(0);
	arg_0 = arg_0_.in();
	arg_1_ = _n.unmarshalString(0);
	arg_1 = arg_1_.in();

}

void _0RL_cd_C56591681C75E8F1_40000000::marshalReturnedValues(cdrStream& _n)
{
	_n.marshalBoolean(result);

}

void _0RL_cd_C56591681C75E8F1_40000000::unmarshalReturnedValues(cdrStream& _n)
{
	result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_C56591681C75E8F1_40000000::_user_exns[] = {
	0
};

// Local call call-back function.
static void
	_0RL_lcfn_C56591681C75E8F1_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
	_0RL_cd_C56591681C75E8F1_40000000* tcd = (_0RL_cd_C56591681C75E8F1_40000000*)cd;
	BankManager::_impl_Account* impl = (BankManager::_impl_Account*) svnt->_ptrToInterface(BankManager::Account::_PD_repoId);
	tcd->result = impl->deposite(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean BankManager::_objref_Account::deposite(const char* id, const char* value)
{
	_0RL_cd_C56591681C75E8F1_40000000 _call_desc(_0RL_lcfn_C56591681C75E8F1_50000000, "deposite", 9);
	_call_desc.arg_0 = id;
	_call_desc.arg_1 = value;

	_invoke(_call_desc);
	return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cstring
class _0RL_cd_C56591681C75E8F1_60000000
	: public omniCallDescriptor
{
public:
	inline _0RL_cd_C56591681C75E8F1_60000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
	omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
	{

	}

	void marshalArguments(cdrStream&);
	void unmarshalArguments(cdrStream&);

	void unmarshalReturnedValues(cdrStream&);
	void marshalReturnedValues(cdrStream&);


	static const char* const _user_exns[];

	::CORBA::String_var arg_0_;
	const char* arg_0;
	::CORBA::String_var result;
};

void _0RL_cd_C56591681C75E8F1_60000000::marshalArguments(cdrStream& _n)
{
	_n.marshalString(arg_0,0);

}

void _0RL_cd_C56591681C75E8F1_60000000::unmarshalArguments(cdrStream& _n)
{
	arg_0_ = _n.unmarshalString(0);
	arg_0 = arg_0_.in();

}

void _0RL_cd_C56591681C75E8F1_60000000::marshalReturnedValues(cdrStream& _n)
{
	_n.marshalString(result,0);

}

void _0RL_cd_C56591681C75E8F1_60000000::unmarshalReturnedValues(cdrStream& _n)
{
	result = _n.unmarshalString(0);

}

const char* const _0RL_cd_C56591681C75E8F1_60000000::_user_exns[] = {
	0
};

// Local call call-back function.
static void
	_0RL_lcfn_C56591681C75E8F1_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
	_0RL_cd_C56591681C75E8F1_60000000* tcd = (_0RL_cd_C56591681C75E8F1_60000000*)cd;
	BankManager::_impl_Account* impl = (BankManager::_impl_Account*) svnt->_ptrToInterface(BankManager::Account::_PD_repoId);
	tcd->result = impl->getBalance(tcd->arg_0);


}

char* BankManager::_objref_Account::getBalance(const char* id)
{
	_0RL_cd_C56591681C75E8F1_60000000 _call_desc(_0RL_lcfn_C56591681C75E8F1_70000000, "getBalance", 11);
	_call_desc.arg_0 = id;

	_invoke(_call_desc);
	return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cstring_i_cstring
class _0RL_cd_C56591681C75E8F1_80000000
	: public omniCallDescriptor
{
public:
	inline _0RL_cd_C56591681C75E8F1_80000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
	omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
	{

	}

	void marshalArguments(cdrStream&);
	void unmarshalArguments(cdrStream&);

	void unmarshalReturnedValues(cdrStream&);
	void marshalReturnedValues(cdrStream&);


	static const char* const _user_exns[];

	::CORBA::String_var arg_0_;
	const char* arg_0;
	::CORBA::String_var arg_1_;
	const char* arg_1;
	::CORBA::String_var arg_2_;
	const char* arg_2;
	::CORBA::Boolean result;
};

void _0RL_cd_C56591681C75E8F1_80000000::marshalArguments(cdrStream& _n)
{
	_n.marshalString(arg_0,0);
	_n.marshalString(arg_1,0);
	_n.marshalString(arg_2,0);

}

void _0RL_cd_C56591681C75E8F1_80000000::unmarshalArguments(cdrStream& _n)
{
	arg_0_ = _n.unmarshalString(0);
	arg_0 = arg_0_.in();
	arg_1_ = _n.unmarshalString(0);
	arg_1 = arg_1_.in();
	arg_2_ = _n.unmarshalString(0);
	arg_2 = arg_2_.in();

}

void _0RL_cd_C56591681C75E8F1_80000000::marshalReturnedValues(cdrStream& _n)
{
	_n.marshalBoolean(result);

}

void _0RL_cd_C56591681C75E8F1_80000000::unmarshalReturnedValues(cdrStream& _n)
{
	result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_C56591681C75E8F1_80000000::_user_exns[] = {
	0
};

// Local call call-back function.
static void
	_0RL_lcfn_C56591681C75E8F1_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
	_0RL_cd_C56591681C75E8F1_80000000* tcd = (_0RL_cd_C56591681C75E8F1_80000000*)cd;
	BankManager::_impl_Account* impl = (BankManager::_impl_Account*) svnt->_ptrToInterface(BankManager::Account::_PD_repoId);
	tcd->result = impl->transfer(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

::CORBA::Boolean BankManager::_objref_Account::transfer(const char* from, const char* to, const char* value)
{
	_0RL_cd_C56591681C75E8F1_80000000 _call_desc(_0RL_lcfn_C56591681C75E8F1_90000000, "transfer", 9);
	_call_desc.arg_0 = from;
	_call_desc.arg_1 = to;
	_call_desc.arg_2 = value;

	_invoke(_call_desc);
	return _call_desc.result;


}
// Local call call-back function.
static void
	_0RL_lcfn_C56591681C75E8F1_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
	_0RL_cd_C56591681C75E8F1_40000000* tcd = (_0RL_cd_C56591681C75E8F1_40000000*)cd;
	BankManager::_impl_Account* impl = (BankManager::_impl_Account*) svnt->_ptrToInterface(BankManager::Account::_PD_repoId);
	tcd->result = impl->withdraw(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean BankManager::_objref_Account::withdraw(const char* id, const char* value)
{
	_0RL_cd_C56591681C75E8F1_40000000 _call_desc(_0RL_lcfn_C56591681C75E8F1_a0000000, "withdraw", 9);
	_call_desc.arg_0 = id;
	_call_desc.arg_1 = value;

	_invoke(_call_desc);
	return _call_desc.result;


}
BankManager::_pof_Account::~_pof_Account() {}


omniObjRef*
	BankManager::_pof_Account::newObjRef(omniIOR* ior, omniIdentity* id)
{
	return new ::BankManager::_objref_Account(ior, id);
}


::CORBA::Boolean
	BankManager::_pof_Account::is_a(const char* id) const
{
	if( omni::ptrStrMatch(id, ::BankManager::Account::_PD_repoId) )
		return 1;

	return 0;
}

const BankManager::_pof_Account _the_pof_BankManager_mAccount;

BankManager::_impl_Account::~_impl_Account() {}


::CORBA::Boolean
	BankManager::_impl_Account::_dispatch(omniCallHandle& _handle)
{
	const char* op = _handle.operation_name();

	if( omni::strMatch(op, "open") ) {

		_0RL_cd_C56591681C75E8F1_00000000 _call_desc(_0RL_lcfn_C56591681C75E8F1_10000000, "open", 5, 1);

		_handle.upcall(this,_call_desc);
		return 1;
	}

	if( omni::strMatch(op, "close") ) {

		_0RL_cd_C56591681C75E8F1_20000000 _call_desc(_0RL_lcfn_C56591681C75E8F1_30000000, "close", 6, 1);

		_handle.upcall(this,_call_desc);
		return 1;
	}

	if( omni::strMatch(op, "deposite") ) {

		_0RL_cd_C56591681C75E8F1_40000000 _call_desc(_0RL_lcfn_C56591681C75E8F1_50000000, "deposite", 9, 1);

		_handle.upcall(this,_call_desc);
		return 1;
	}

	if( omni::strMatch(op, "getBalance") ) {

		_0RL_cd_C56591681C75E8F1_60000000 _call_desc(_0RL_lcfn_C56591681C75E8F1_70000000, "getBalance", 11, 1);

		_handle.upcall(this,_call_desc);
		return 1;
	}

	if( omni::strMatch(op, "transfer") ) {

		_0RL_cd_C56591681C75E8F1_80000000 _call_desc(_0RL_lcfn_C56591681C75E8F1_90000000, "transfer", 9, 1);

		_handle.upcall(this,_call_desc);
		return 1;
	}

	if( omni::strMatch(op, "withdraw") ) {

		_0RL_cd_C56591681C75E8F1_40000000 _call_desc(_0RL_lcfn_C56591681C75E8F1_a0000000, "withdraw", 9, 1);

		_handle.upcall(this,_call_desc);
		return 1;
	}


	return 0;
}

void*
	BankManager::_impl_Account::_ptrToInterface(const char* id)
{
	if( id == ::BankManager::Account::_PD_repoId )
		return (::BankManager::_impl_Account*) this;

	if( id == ::CORBA::Object::_PD_repoId )
		return (void*) 1;

	if( omni::strMatch(id, ::BankManager::Account::_PD_repoId) )
		return (::BankManager::_impl_Account*) this;

	if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
		return (void*) 1;
	return 0;
}

const char*
	BankManager::_impl_Account::_mostDerivedRepoId()
{
	return ::BankManager::Account::_PD_repoId;
}

POA_BankManager::Account::~Account() {}

